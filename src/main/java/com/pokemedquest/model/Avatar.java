package com.pokemedquest.model;

import com.pokemedquest.util.AsciiArtLoader; // Import the utility class

/**
 * Represents a customizable Avatar linked to a User in PokeMed_Quest.
 */
public class Avatar {

    // --- Fields ---
    private int avatarId;      // Unique identifier for the avatar
    private int userId;        // Foreign key linking to the User this avatar belongs to
    private String avatarName; // Name given to the avatar by the user
    private String color;      // Example customization: color attribute
    private String accessory;  // Example customization: accessory attribute
    private int level;         // Example gamification: avatar level
    private int totalExperience; // New field: Cumulative experience points from tests
    private String asciiArtPath;// Path to the ASCII art file for the avatar

    // --- Constructors ---

    /**
     * Constructor for creating a new Avatar object (e.g., during user registration).
     * The avatarId is typically generated by the database.
     * Initializes level to 1 and totalExperience to 0.
     *
     * @param userId The ID of the user who owns this avatar.
     * @param avatarName The chosen name for the avatar.
     * @param color The initial color.
     * @param accessory The initial accessory.
     * Note: Level is intentionally omitted, starts at 1.
     */
    public Avatar(int userId, String avatarName, String color, String accessory) {
        this.userId = userId;
        this.avatarName = avatarName;
        this.color = color;
        this.accessory = (accessory == null || accessory.trim().isEmpty()) ? "none" : accessory.toLowerCase();
        this.level = 1; // Start at level 1
        this.totalExperience = 0; // Start with 0 experience
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory); // Dynamically set ASCII art path
    }

    /**
     * Constructor used when retrieving Avatar data from the database.
     *
     * @param avatarId The unique ID from the database.
     * @param userId The ID of the user who owns this avatar.
     * @param avatarName The name of the avatar.
     * @param color The color attribute.
     * @param accessory The accessory attribute.
     * @param level The current level.
     * @param totalExperience The current total experience points. // Added parameter
     */
    public Avatar(int avatarId, int userId, String avatarName, String color, String accessory, int level, int totalExperience) {
        this.avatarId = avatarId;
        this.userId = userId;
        this.avatarName = avatarName;
        this.color = color;
        this.accessory = (accessory == null || accessory.trim().isEmpty()) ? "none" : accessory.toLowerCase();
        this.level = level;
        this.totalExperience = totalExperience; // Assign from database value
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory); // Dynamically set ASCII art path
    }

    // --- New Methods ---

    /**
     * Dynamically determines the ASCII art file path based on the avatar's name, level, and accessory.
     *
     * @param name The name of the avatar (e.g., Warrior, Mage, Archer).
     * @param lvl The current level of the avatar.
     * @param acc The current accessory of the avatar ("none" if no accessory).
     * @return The file path for the corresponding ASCII art.
     */
    private String determineAsciiArtPath(String name, int lvl, String acc) {
        String basePath = "src/main/resources/ascii_art/";
        String fileName;
        String effectiveAccessory = (acc == null || acc.trim().isEmpty() || "none".equalsIgnoreCase(acc)) ? null : acc.toLowerCase();

        // Determine the base file name stem based on the avatar's name
        switch (name.toLowerCase()) {
            case "warrior":
                fileName = "avatar1";
                break;
            case "mage":
                fileName = "avatar2";
                break;
            case "archer":
                fileName = "avatar3";
                break;
            default:
                fileName = "avatar1"; // Default to Warrior if no match
        }

        // Determine evolution state
        if (lvl >= 5 && lvl < 10) {
            fileName += "_evolved1";
        } else if (lvl >= 10) {
            fileName += "_evolved2";
        } else {
            fileName += "_default"; // Base form
        }

        // Add the accessory to the file name if applicable
        if (effectiveAccessory != null) {
            fileName += "_" + effectiveAccessory;
        }

        // Add the file extension
        fileName += ".txt";

        return basePath + fileName;
    }

    /**
     * Displays the ASCII art for the avatar.
     */
    public void displayAsciiArt() {
        // Ensure the path is up-to-date before displaying
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory);
        System.out.println("Displaying ASCII art from: " + asciiArtPath);
        System.out.println(AsciiArtLoader.loadAsciiArt(asciiArtPath));
    }

    /**
     * Updates the ASCII art file path. Generally not needed externally as it's recalculated.
     * Kept for potential specific use cases or debugging.
     * @param asciiArtPath The new file path for the ASCII art.
     */
    public void setAsciiArtPath(String asciiArtPath) {
        this.asciiArtPath = asciiArtPath;
    }

    /**
     * Retrieves the current ASCII art file path.
     * @return The file path of the ASCII art.
     */
    public String getAsciiArtPath() {
        // Recalculate just in case state changed without calling setter
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory);
        return asciiArtPath;
    }

    // --- Getters and Setters ---

    public int getAvatarId() {
        return avatarId;
    }

    public void setAvatarId(int avatarId) {
        this.avatarId = avatarId;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getAvatarName() {
        return avatarName;
    }

    public void setAvatarName(String avatarName) {
        this.avatarName = avatarName;
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory); // Update ASCII art path
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
        // Color doesn't affect ASCII art path in current logic
    }

    public String getAccessory() {
        return accessory;
    }

    public void setAccessory(String accessory) {
        this.accessory = (accessory == null || accessory.trim().isEmpty()) ? "none" : accessory.toLowerCase();
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory); // Update ASCII art path
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
        this.asciiArtPath = determineAsciiArtPath(this.avatarName, this.level, this.accessory); // Update ASCII art path
    }

    // Getter and Setter for totalExperience
    public int getTotalExperience() {
        return totalExperience;
    }

    public void setTotalExperience(int totalExperience) {
        this.totalExperience = totalExperience;
        // Experience itself doesn't change ASCII art, but level derived from it might
        // Level changes are handled separately by the ProgressService which then calls setLevel
    }


    // --- Optional: toString() method for debugging ---
    @Override
    public String toString() {
        return "Avatar{" +
                "avatarId=" + avatarId +
                ", userId=" + userId +
                ", avatarName='" + avatarName + '\'' +
                ", color='" + color + '\'' +
                ", accessory='" + accessory + '\'' +
                ", level=" + level +
                ", totalExperience=" + totalExperience + // Added
                ", asciiArtPath='" + getAsciiArtPath() + '\'' + // Use getter to ensure path is current
                '}';
    }
}